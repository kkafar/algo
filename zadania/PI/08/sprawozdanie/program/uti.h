#ifndef __UTI_H__
#define __UTI_H__
#include <time.h>

#define MAX_NAME_SIZE 35
// Zmienne globlalne to zło? 
extern int coll1, coll2;


////////////////////////////////////////////////////////////////////////////////
typedef struct Node
{
    char * name, * number, state;
} Node;
////////////////////////////////////////////////////////////////////////////////
// Node * new_node();
////////////////////////////////////////////////////////////////////////////////
void set_node(Node * node, char * name, char * number);
////////////////////////////////////////////////////////////////////////////////
void del_node(Node * node);
////////////////////////////////////////////////////////////////////////////////
void init_node(Node * node);
////////////////////////////////////////////////////////////////////////////////
/* Czyszczenie buffera z pozostawionego przez scnaf znaku nowej linii */
void clear_buff();
////////////////////////////////////////////////////////////////////////////////
/* Porównanie 2 stringow. (Muszą byc zakonczone znakiem nowej linii) */
int str_cmp(char * str1, char * str2);
////////////////////////////////////////////////////////////////////////////////
int get_hash(char * str1, int mod);
////////////////////////////////////////////////////////////////////////////////
int dbh_insert(Node * hash_arr, char * name, char * number, int n);
////////////////////////////////////////////////////////////////////////////////
int dbh_rm(Node * hash_arr, char * name, int n);
////////////////////////////////////////////////////////////////////////////////
int str_len(char * str);
////////////////////////////////////////////////////////////////////////////////
char * dbh_find(Node * hash_arr, char * name, int n);
////////////////////////////////////////////////////////////////////////////////
int get_power2(int n);
////////////////////////////////////////////////////////////////////////////////
int pho_insert(Node * hash_arr, char * name, char * number, int n);
////////////////////////////////////////////////////////////////////////////////
int pho_rm(Node * hash_arr, char * name, int n);
////////////////////////////////////////////////////////////////////////////////
char * pho_find(Node * hash_arr, char * name, int n);
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// POMIAR CZASU
////////////////////////////////////////////////////////////////////////////////
typedef struct Timer
{
    clock_t start_time, stop_time;
    double passed_time;
} Timer;
////////////////////////////////////////////////////////////////////////////////
void timer_start(Timer * timer);
////////////////////////////////////////////////////////////////////////////////
void timer_stop(Timer * timer);
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/// GENEROWANIE WEJŚCIA
////////////////////////////////////////////////////////////////////////////////
char * get_rand_query_type(int size);
////////////////////////////////////////////////////////////////////////////////
char * get_rand_str(int size);
////////////////////////////////////////////////////////////////////////////////
int * get_idx(int size);
////////////////////////////////////////////////////////////////////////////////
void get_rand_query(Node * node);
////////////////////////////////////////////////////////////////////////////////
void get_rand_data(Node * node);
////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
/// Węzeł listy (metoda łańcuchowa)
///////////////////////////////////////////////////////////////////////
typedef struct SllNode
{
    char * name, * number;
    struct SllNode * next;
} SllNode;
///////////////////////////////////////////////////////////////////////
SllNode * sll_get_new_node();
///////////////////////////////////////////////////////////////////////
void sll_set_node(SllNode * node, char * name, char * number, SllNode * next);
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
/// Lista
///////////////////////////////////////////////////////////////////////
typedef struct SinglyLinkedList
{
    // wartownik
    SllNode * snt;
} sl_list;
///////////////////////////////////////////////////////////////////////
void sll_init(sl_list * list);
///////////////////////////////////////////////////////////////////////
void sll_push(sl_list * list, char * name, char * number);
///////////////////////////////////////////////////////////////////////
void sll_delete(sl_list * list);
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
/// METODA ŁAŃCUCHOWA
///////////////////////////////////////////////////////////////////////
int has_rm(sl_list * list, char * name);
///////////////////////////////////////////////////////////////////////
char * has_find(sl_list * list, char * name);
///////////////////////////////////////////////////////////////////////

#endif